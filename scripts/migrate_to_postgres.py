#!/usr/bin/env python3
"""
KHAZAD_DUM PostgreSQL Migration Script
Helps migrate from SQLite to PostgreSQL and manage the transition
"""

import os
import sys
import argparse
import logging
from pathlib import Path
from datetime import datetime
import subprocess

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.data_pipeline.storage.database_manager import DatabaseManager
from src.data_pipeline.storage.postgres_manager import PostgreSQLManager, get_database_manager

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def check_prerequisites():
    """Check if all prerequisites are met"""
    logger.info("Checking prerequisites for PostgreSQL migration...")
    
    # Check Docker
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            logger.info(f"âœ“ Docker available: {result.stdout.strip()}")
        else:
            logger.error("âœ— Docker not available")
            return False
    except FileNotFoundError:
        logger.error("âœ— Docker not found. Please install Docker first.")
        return False
    
    # Check Docker Compose
    try:
        result = subprocess.run(['docker', 'compose', 'version'], capture_output=True, text=True)
        if result.returncode == 0:
            logger.info(f"âœ“ Docker Compose available: {result.stdout.strip()}")
        else:
            logger.error("âœ— Docker Compose not available")
            return False
    except FileNotFoundError:
        logger.error("âœ— Docker Compose not found")
        return False
    
    # Check if PostgreSQL dependencies are available
    try:
        import psycopg2
        logger.info("âœ“ psycopg2 available")
    except ImportError:
        logger.error("âœ— psycopg2 not installed. Run: pip install psycopg2-binary")
        return False
    
    return True


def create_env_file():
    """Create or update .env file with PostgreSQL settings"""
    env_file = Path('.env')
    
    # Default environment variables
    default_env = {
        'ENVIRONMENT': 'development',
        'DATABASE_URL': 'postgresql://khazad_user:khazad_secure_2024!@localhost:5432/khazad_dum',
        'POSTGRES_HOST': 'localhost',
        'POSTGRES_PORT': '5432',
        'POSTGRES_DB': 'khazad_dum',
        'POSTGRES_USER': 'khazad_user',
        'POSTGRES_PASSWORD': 'khazad_secure_2024!',
        'REDIS_HOST': 'localhost',
        'REDIS_PORT': '6379',
        'REDIS_PASSWORD': 'redis_secure_2024!',
        'LOG_LEVEL': 'INFO',
    }
    
    # Read existing .env if it exists
    existing_env = {}
    if env_file.exists():
        logger.info("Reading existing .env file...")
        with open(env_file) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_env[key] = value
    
    # Merge with defaults (existing takes precedence)
    merged_env = {**default_env, **existing_env}
    
    # Write updated .env file
    logger.info(f"Writing environment variables to {env_file}")
    with open(env_file, 'w') as f:
        f.write("# KHAZAD_DUM Environment Variables\n")
        f.write("# Generated by migrate_to_postgres.py\n")
        f.write(f"# Generated at: {datetime.now().isoformat()}\n\n")
        
        f.write("# Database Configuration\n")
        for key in ['DATABASE_URL', 'POSTGRES_HOST', 'POSTGRES_PORT', 'POSTGRES_DB', 'POSTGRES_USER', 'POSTGRES_PASSWORD']:
            f.write(f"{key}={merged_env[key]}\n")
        
        f.write("\n# Redis Configuration\n")
        for key in ['REDIS_HOST', 'REDIS_PORT', 'REDIS_PASSWORD']:
            f.write(f"{key}={merged_env[key]}\n")
        
        f.write("\n# Application Settings\n")
        for key in ['ENVIRONMENT', 'LOG_LEVEL']:
            f.write(f"{key}={merged_env[key]}\n")
        
        f.write("\n# API Keys (add your actual keys here)\n")
        f.write("# OPENAI_API_KEY=your_openai_key_here\n")
        f.write("# FINNHUB_API_KEY=your_finnhub_key_here\n")
        f.write("# POLYGON_API_KEY=your_polygon_key_here\n")
        f.write("# ALPHA_VANTAGE_KEY=your_alphavantage_key_here\n")
    
    logger.info("âœ“ Environment file created/updated")


def start_database_services():
    """Start PostgreSQL and Redis services"""
    logger.info("Starting database services...")
    
    # Create data directories
    data_dirs = ['data/postgres', 'data/redis']
    for dir_path in data_dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        logger.info(f"âœ“ Created directory: {dir_path}")
    
    # Start services
    try:
        result = subprocess.run([
            'docker', 'compose', 'up', '-d', 'database', 'redis'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info("âœ“ Database services started successfully")
            logger.info("PostgreSQL: localhost:5432")
            logger.info("Redis: localhost:6379")
        else:
            logger.error(f"Failed to start services: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"Error starting services: {e}")
        return False
    
    return True


def wait_for_services():
    """Wait for services to be ready"""
    import time
    
    logger.info("Waiting for services to be ready...")
    
    max_attempts = 30
    for attempt in range(max_attempts):
        try:
            # Test PostgreSQL connection
            db = PostgreSQLManager()
            health = db.health_check()
            if health['status'] == 'healthy':
                logger.info("âœ“ PostgreSQL is ready")
                db.close()
                return True
        except Exception:
            pass
        
        logger.info(f"Waiting... (attempt {attempt + 1}/{max_attempts})")
        time.sleep(2)
    
    logger.error("Services did not become ready in time")
    return False


def migrate_data_from_sqlite():
    """Migrate existing data from SQLite to PostgreSQL"""
    sqlite_db_path = Path('config/data/databases/khazad_dum.db')
    
    if not sqlite_db_path.exists():
        logger.info("No SQLite database found to migrate")
        return True
    
    logger.info(f"Migrating data from SQLite: {sqlite_db_path}")
    
    try:
        # Initialize both databases
        sqlite_db = DatabaseManager(str(sqlite_db_path))
        postgres_db = PostgreSQLManager()
        
        # Migrate stock metrics
        logger.info("Migrating stock metrics...")
        stock_metrics = sqlite_db.get_latest_metrics()
        if not stock_metrics.empty:
            rows_inserted = postgres_db.insert_stock_metrics(stock_metrics)
            logger.info(f"âœ“ Migrated {rows_inserted} stock metrics")
        
        # Close connections
        sqlite_db.close()
        postgres_db.close()
        
        logger.info("âœ“ Data migration completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"Data migration failed: {e}")
        return False


def test_database_operations():
    """Test basic database operations"""
    logger.info("Testing database operations...")
    
    try:
        # Test with factory function (should auto-detect PostgreSQL)
        db = get_database_manager()
        
        # Test connection info
        info = db.get_connection_info()
        logger.info(f"Connected to: {info}")
        
        # Test health check
        health = db.health_check()
        logger.info(f"Health status: {health['status']}")
        
        db.close()
        logger.info("âœ“ Database operations test passed")
        return True
        
    except Exception as e:
        logger.error(f"Database test failed: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description="KHAZAD_DUM PostgreSQL Migration")
    parser.add_argument('--check', action='store_true', help='Only check prerequisites')
    parser.add_argument('--env-only', action='store_true', help='Only create .env file')
    parser.add_argument('--start-services', action='store_true', help='Only start services')
    parser.add_argument('--migrate-data', action='store_true', help='Only migrate data')
    parser.add_argument('--test', action='store_true', help='Only test database')
    parser.add_argument('--full', action='store_true', help='Full migration process')
    
    args = parser.parse_args()
    
    if not any(vars(args).values()):
        args.full = True  # Default to full migration
    
    logger.info("ðŸš€ KHAZAD_DUM PostgreSQL Migration Starting")
    logger.info("=" * 50)
    
    # Check prerequisites
    if not check_prerequisites():
        sys.exit(1)
    
    if args.check:
        logger.info("âœ“ Prerequisites check completed")
        return
    
    # Create environment file
    if args.env_only or args.full:
        create_env_file()
        if args.env_only:
            return
    
    # Start services
    if args.start_services or args.full:
        if not start_database_services():
            sys.exit(1)
        if not wait_for_services():
            sys.exit(1)
        if args.start_services:
            return
    
    # Migrate data
    if args.migrate_data or args.full:
        if not migrate_data_from_sqlite():
            logger.warning("Data migration failed, but continuing...")
        if args.migrate_data:
            return
    
    # Test database
    if args.test or args.full:
        if not test_database_operations():
            sys.exit(1)
        if args.test:
            return
    
    logger.info("=" * 50)
    logger.info("ðŸŽ‰ Migration completed successfully!")
    logger.info("")
    logger.info("Next steps:")
    logger.info("1. Verify your API keys in the .env file")
    logger.info("2. Update your code to use get_database_manager()")
    logger.info("3. Test your application with PostgreSQL")
    logger.info("4. Monitor performance and optimize as needed")
    logger.info("")
    logger.info("PostgreSQL is now running on localhost:5432")
    logger.info("Redis is running on localhost:6379")
    logger.info("Use 'docker compose logs database' to see PostgreSQL logs")


if __name__ == '__main__':
    main()